#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
from marshmallow import Schema
from marshmallow import fields
from marshmallow import validate


class Task(Schema):
    host_id = fields.Integer(required=True, validate=lambda s: s > 0)
    check = fields.Boolean(required=True, default=False, validate=validate.OneOf([True, False]))


class TaskGeneralSchema(Schema):
    """
    validator for basic task info
    """

    task_id = fields.String(required=True, validate=lambda s: len(s) > 0)
    task_name = fields.String(required=True, validate=lambda s: len(s) > 0)
    total_hosts = fields.List(fields.Integer(validate=lambda s: s > 0), required=True)
    task_type = fields.String(required=True, validate=lambda s: len(s) > 0)
    check_items = fields.List(fields.String(validate=lambda s: len(s) > 0), required=True)
    tasks = fields.List(fields.Nested(Task()), required=True, validate=lambda s: len(s) > 0)
    callback = fields.String(required=True)


class RepoInfo(Schema):
    """
    validator for repo info
    """

    name = fields.String(required=True, validate=lambda s: len(s) > 0)
    dest = fields.String(required=True, validate=lambda s: len(s) > 0)
    repo_content = fields.String(required=True, validate=lambda s: len(s) > 0)


class RepoSetSchema(TaskGeneralSchema):
    """
    validator for repo set
    """

    repo_info = fields.Nested(RepoInfo(), required=True)

    class Meta:
        fields = ("task_id", "task_name", "total_hosts", "task_type", "callback", "repo_info", "check_items")


class CveScanSchema(TaskGeneralSchema):
    """
    validator for cve scan
    """

    task_name = fields.String(required=False, validate=lambda s: len(s) > 0)

    class Meta:
        fields = ("task_id", "task_name", "total_hosts", "task_type", "callback", "check_items")


class CveFixRpmInfoSchema(Schema):
    installed_rpm = fields.String(validate=lambda s: len(s) > 0)
    available_rpm = fields.String(validate=lambda s: len(s) > 0)


class CveFixTask(Schema):
    host_id = fields.Integer(required=True, validate=lambda s: s > 0)
    rpms = fields.List(fields.Nested(CveFixRpmInfoSchema()), required=True)


class CveFixSchema(TaskGeneralSchema):
    """
    validator for cve fix
    """

    tasks = fields.List(fields.Nested(CveFixTask()), required=True, validate=lambda s: len(s) > 0)
    accepted = fields.Boolean(validate=validate.OneOf([True, False]), required=True)
    fix_type = fields.String(validate=validate.OneOf(["hotpatch", "coldpatch"]), required=True)


class CveRollbackSingleInfoSchema(Schema):
    cve_id = fields.String(validate=lambda s: len(s) > 0)
    hotpatch = fields.Boolean(validate=validate.OneOf([True, False]))


class CveRollbackTask(Schema):
    host_id = fields.Integer(required=True, validate=lambda s: s > 0)
    cves = fields.List(fields.Nested(CveRollbackSingleInfoSchema()), required=True)


class CveRollbackSchema(TaskGeneralSchema):
    """
    validator for cve rollback
    """

    tasks = fields.List(fields.Nested(CveRollbackTask()), required=True, validate=lambda s: len(s) > 0)

    class Meta:
        fields = ("tasks", "task_id", "task_name", "total_hosts", "task_type", "callback")


class HotpatchRemoveTask(Schema):
    host_id = fields.Integer(required=True, validate=lambda s: s > 0)
    cves = fields.List(fields.String(validate=lambda s: len(s) > 0), required=True)


class HotpatchRemoveSchema(TaskGeneralSchema):
    """
    validator for hotpatch remove
    """

    tasks = fields.List(fields.Nested(HotpatchRemoveTask()), required=True, validate=lambda s: len(s) > 0)

    class Meta:
        fields = ("tasks", "task_id", "task_name", "total_hosts", "task_type", "callback")
