#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import json
from unittest import mock

from vulcanus.multi_thread_handler import MultiThreadHandler
from vulcanus.restful.resp.state import (
    DATABASE_CONNECT_ERROR,
    DATABASE_QUERY_ERROR,
    PARAM_ERROR,
    SERVER_ERROR,
    SUCCEED,
    TOKEN_ERROR,
)
from vulcanus.restful.response import BaseResponse
from zeus.conf.constant import EXECUTE_CVE_FIX
from zeus.tests import BaseTestCase
from zeus.vulnerability_manage.view import ExecuteCveFixTask

client = BaseTestCase.create_app()


class TestCveFix(BaseTestCase):
    HEADERS = {"Content-Type": "application/json; charset=UTF-8"}
    HEADERS_WITH_TOKEN = {"Content-Type": "application/json; charset=UTF-8", "access_token": "mock_token"}

    MOCK_HOST_INFO = {
        1: {
            "host_id": 1,
            "host_ip": 1,
            "ssh_port": 22,
            "ssh_user": "user",
            "pkey": "rsa-key-1",
            "host_name": "test1",
            "host_group_name": "group1",
            "management": True,
            "username": "admin",
        },
        2: {
            "host_id": 2,
            "host_ip": 1,
            "ssh_port": 23,
            "ssh_user": "user",
            "pkey": "rsa-key-2",
            "host_name": "test1",
            "host_group_name": "group1",
            "management": True,
            "username": "admin",
        },
    }

    def setUp(self) -> None:
        self.MOCK_ARGS = {
            "task_id": "mock_task_id",
            "task_name": "mock_task_name",
            "task_type": "mock_task_type",
            "total_hosts": [1, 2, 3],
            "accepted": False,
            "check_items": [],
            "tasks": [
                {"host_id": 1, "check": False, "cves": [{"cve_id": "mock_cve_id", "hotpatch": False}]},
                {"host_id": 2, "check": False, "cves": [{"cve_id": "mock_cve_id", "hotpatch": False}]},
                {"host_id": 3, "check": False, "cves": [{"cve_id": "mock_cve_id", "hotpatch": False}]},
            ],
            "callback": "mock_callback",
        }

    @mock.patch.object(ExecuteCveFixTask, '_callback')
    @mock.patch.object(MultiThreadHandler, "get_result")
    @mock.patch.object(MultiThreadHandler, "create_thread")
    @mock.patch('zeus.vulnerability_manage.view.query_host_basic_info')
    @mock.patch.object(BaseResponse, "verify_request")
    def test_cve_fix_should_return_execute_result_when_all_is_right(
        self, mock_verify_request, mock_query_host_info, mock_create_thread, mock_get_result, mock_callback
    ):
        mock_verify_request.return_value = self.MOCK_ARGS, SUCCEED
        mock_query_host_info.return_value = SUCCEED, self.MOCK_HOST_INFO
        mock_create_thread.return_value = None
        mock_callback.return_value = None
        mock_get_result.return_value = [
            {
                "code": SUCCEED,
                "msg": "operate success",
                "result": [{"cve_id": "mock_cve_id", "log": "fix succeed", "result": "fixed"}],
                "host_id": 1,
                "task_id": "mock_task_id",
                "host_name": "host_name_1",
                "host_ip": "host_ip_1",
                "callback": "mock_callback",
                "headers_apollo": {},
            },
            {
                "code": SERVER_ERROR,
                "msg": "host connection error",
                "result": [],
                "host_id": 2,
                "task_id": "mock_task_id",
                "host_name": "host_name_2",
                "host_ip": "host_ip_2",
                "callback": "mock_callback",
                "headers_apollo": {},
            },
        ]
        response = client.post(EXECUTE_CVE_FIX, data=json.dumps(self.MOCK_ARGS), headers=self.HEADERS_WITH_TOKEN)

        expect_result = {
            "code": "200",
            "message": "operation succeed",
            "label": SUCCEED,
            "data": {
                "result": {
                    "task_id": "mock_task_id",
                    "task_name": "mock_task_name",
                    "task_result": [
                        {
                            "check_items": [],
                            "cves": [{"cve_id": "mock_cve_id", "log": "fix succeed", "result": "fixed"}],
                            "host_id": 1,
                            "host_ip": "host_ip_1",
                            "host_name": "host_name_1",
                            "log": "operate success",
                            "status": "succeed",
                        },
                        {
                            "check_items": [],
                            "cves": [],
                            "host_id": 2,
                            "host_ip": "host_ip_2",
                            "host_name": "host_name_2",
                            "log": "host connection error",
                            "status": "fail",
                        },
                        {
                            "check_items": [],
                            "cves": [],
                            "host_id": 3,
                            "host_ip": "unknown host",
                            "host_name": "unknown host",
                            "log": "No matching data found in the database.",
                            "status": "unknown",
                        },
                    ],
                }
            },
        }
        self.assertEqual(expect_result, response.json)

    @mock.patch.object(BaseResponse, "verify_token")
    def test_cve_fix_should_return_token_error_when_request_without_token_or_request_with_incorrect_token(
        self, mock_verify_token
    ):
        mock_verify_token.return_value = TOKEN_ERROR
        response = client.post(EXECUTE_CVE_FIX, data=json.dumps(self.MOCK_ARGS), headers=self.HEADERS)
        self.assertEqual(TOKEN_ERROR, response.json.get('label'))

    def test_cve_fix_should_return_param_error_when_request_with_incorrect_args(self):
        self.MOCK_ARGS.update({"callback": []})
        response = client.post(EXECUTE_CVE_FIX, data=json.dumps(self.MOCK_ARGS), headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(PARAM_ERROR, response.json.get('label'))

    def test_cve_fix_should_return_400_when_request_without_args(self):
        response = client.post(EXECUTE_CVE_FIX, headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(400, response.status_code)

    def test_cve_fix_should_return_405_when_request_method_is_not_post(self):
        response = client.get(EXECUTE_CVE_FIX, data=json.dumps(self.MOCK_ARGS), headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(405, response.status_code)

    @mock.patch('zeus.vulnerability_manage.view.query_host_basic_info')
    @mock.patch.object(BaseResponse, "verify_request")
    def test_cve_fix_should_return_database_connect_error_when_cannot_connect_database(
        self, mock_verify_request, mock_query_host_info
    ):
        mock_verify_request.return_value = self.MOCK_ARGS, SUCCEED
        mock_query_host_info.return_value = DATABASE_CONNECT_ERROR, {}
        response = client.post(EXECUTE_CVE_FIX, data=json.dumps(self.MOCK_ARGS), headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(DATABASE_CONNECT_ERROR, response.json.get('label'))

    @mock.patch('zeus.vulnerability_manage.view.query_host_basic_info')
    @mock.patch.object(BaseResponse, "verify_request")
    def test_cve_fix_should_return_database_query_error_when_query_data_is_error(
        self, mock_verify_request, mock_query_host_info
    ):
        mock_verify_request.return_value = self.MOCK_ARGS, SUCCEED
        mock_query_host_info.return_value = DATABASE_QUERY_ERROR, {}
        response = client.post(EXECUTE_CVE_FIX, data=json.dumps(self.MOCK_ARGS), headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(DATABASE_QUERY_ERROR, response.json.get('label'))
